#!/usr/bin/env perl
# ------------------------------------------------------------------------------
# $Id$
# ------------------------------------------------------------------------------
# This program converts an NBE file to the IVIL format
# ------------------------------------------------------------------------------
# Copyright (C) 2010  Schuberg Philis, Frank Breedijk - Under MIT license
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ------------------------------------------------------------------------------

use strict;
use IVIL;

use Getopt::Long;
use Carp;
use XML::Simple;
use Data::Dumper;

my (
	$scanname,
	$scanner,
	$scannerversion,
	$help,
	$verbose,
	$workspace,
	$timestamp,
	$infile,
	$outfile,
	@findings,
   );

$help = 0;

# Create default values

GetOptions(	'scan=s'		=> \$scanname,
		'scanner=s'		=> \$scanner,
		'scannerversion=s'	=> \$scannerversion,
		'help|h!'		=> \$help,
		'verbose|v!'		=> \$verbose,
		'workspace=s'		=> \$workspace,
		'timestamp=s'		=> \$timestamp,
		'infile=s'		=> \$infile,
		'outfile=s'		=> \$outfile,
	  );

help() if $help;
$scanname = $workspace unless $scanname;

if ( ! $infile || ! -e $infile ) {
	print "You must specify the infile parameter";
	help();
} elsif ( ( $workspace && ! $scanname ) || ( ! $workspace && $scanname ) ) {
	print "workspace and scan have to specified both or not at all";
	help();
};

print "Reading in .nessus file" if $verbose;
my $nessus = XMLin($infile,
		   forceArray	=> [ 'ReportHost', 'ReportItem', 'see_also', 'xref', 'cve', 'bid' ],
		   KeyAttr	=> undef,
	          );

# Lets clear some memory space
#$nessus->{Policy}->{Preferences}->{ServerPreferences} = undef;
#$nessus->{Policy}->{Preferences}->{PluginsPreferences} = undef;
#$nessus->{Policy}->{FamilySelection} = undef;
#$nessus->{Policy}->{IndividualPluginSelection} = undef;
$nessus->{Policy} = undef;

unless ( $outfile ) {
	$outfile = $infile;
	$outfile =~ s/\.nessus$//;
	$outfile .= ".ivil.xml";
}
print "Opening file $outfile for output\n" if $verbose;
open(OUT, ">$outfile") or die "Unable to open output file $outfile";
print OUT xml_header();
print OUT ivil_open();

if ($workspace) {
	print "Creating addressee block\n" if $verbose;
	print OUT ivil_addressee("Seccubus", {
						"workspace" => $workspace,
						"scan"		=> $scanname,
			 		     });
}

print "Creating findings\n" if $verbose;
print OUT "<findings>\n";

foreach my $host ( @{$nessus->{Report}->{ReportHost}} ) {
	# Lets get the basic host parameters first
	my $ip = $host->{name};			# This values stores how the 
						# host was defined by the user
	foreach my $item ( @{$host->{ReportItem}} ) {
		# O.K. lets go through all findings
		my $finding = {};
		$finding->{ip} = $ip;
		if ( $item->{pluginID} eq '0' && $item->{pluginName} eq '' && $item->{pluginFamily} eq '' ) { 
			# We are dealing with portscanner output
			$item->{pluginID} = 'portscanner';
			$item->{synopsis} = "Port $item->{port}/$item->{protocol} is open.\nService was identified as $item->{svc_name}";
		}
		foreach my $key ( keys %{$item} ) {
			if ( $key eq 'protocol' ) {
			} elsif ( $key eq 'port' ) {
			} elsif ( $key eq 'pluginID' ) {
				$finding->{id} = $item->{pluginID};
			} elsif ( $key eq 'pluginName' ) {
			} elsif ( $key eq 'pluginFamily' ) {
			} elsif ( $key eq 'svc_name' ) {
			} elsif ( $key eq 'synopsis' ) {
			} elsif ( $key eq 'plugin_output' ) {
			} elsif ( $key eq 'description' ) {
			} elsif ( $key eq 'risk_factor' ) {
			} elsif ( $key eq 'solution' ) {
			} elsif ( $key eq 'exploit_available' ) {
			} elsif ( $key eq 'exploitability_ease' ) {
			} elsif ( $key eq 'patch_publication_date' ) {
			} elsif ( $key eq 'cvss_vector' ) {
			} elsif ( $key eq 'cvss_base_score' ) {
			} elsif ( $key eq 'cvss_temporal_vector' ) {
			} elsif ( $key eq 'cvss_temporal_score' ) {
			} elsif ( $key eq 'see_also' ) {
			} elsif ( $key eq 'xref' ) {
			} elsif ( $key eq 'cve' ) {
			} elsif ( $key eq 'bid' ) {
			} elsif ( $key eq 'severity' ) {
				if ( $item->{severity} > 0 ) {
					$finding->{severity} = 4 - $item->{severity};
				} else {
					$finding->{severity} = $item->{severity};
				}
			} elsif ( $key eq 'plugin_publication_date' ) {
			} elsif ( $key eq 'plugin_modification_date' ) {
			} elsif ( $key eq 'plugin_version' ) {
			} elsif ( $key eq 'vuln_publication_date' ) {
			} else {
				print Dumper($item);
				print "\nUnknown attribute $key";
				die "Unknown attribute $key";
			}
		}
		$item->{port} = 'generic' if ( $item->{port} eq '0' ); 
		$finding->{port} = "$item->{port}/$item->{protocol}";

		my $txt = "";
		if ( $item->{synopsis} ) {
			$txt =  $item->{synopsis};
		}
		if ( $item->{plugin_output} ) {
			$txt = join ( "\n", $txt, "\nPlugin output:",  $item->{plugin_output} );
		}
		if ( $item->{description} ) {
			$txt = join( "\n", $txt, "\nDescription:", $item->{description});
		}
		$txt .= "\n\n";
		if ( $item->{solution} ) {
			$txt .= "Solution:\n$item->{solution}\n\n";
		}
		if ( $item->{severity} ) {
			$txt .= "Severity: $item->{severity}\n\n";
		}
		if ( $item->{risk_factor} ) {
			$txt .= "Risk factor: $item->{risk_factor}\n\n";
		}
		if ( $item->{exploitability_ease} ) {
			$txt .= "Ease of exploit: $item->{exploitability_ease}\n\n";
		}
		if ( $item->{patch_publication_date} ) {
			$txt .= "Patch available since: $item->{patch_publication_date}\n\n";
		}
		if ( $item->{cvss_vector} ) {
			$txt .= "CVSS base vector: $item->{cvss_vector}\n";
		}
		if ( $item->{cvss_base_score} ) {
			$txt .= "CVSS base score: $item->{cvss_base_score}\n\n";
		}
		if ( $item->{cvss_temporal_vector} ) {
			$txt .= "CVSS temporal vector: $item->{cvss_temporal_vector}\n";
		}
		if ( $item->{cvss_temporal_score} ) {
			$txt .= "CVSS temporal score: $item->{cvss_temporal_score}\n\n";
		}
		if ( $item->{see_also} ) {
			$txt .= "See also:\n" . join("\n", @{$item->{see_also}});
			$txt .= "\n\n";
		}
		if ( $item->{cve} ) {
			$txt .= "CVE references: ". join(" ", @{$item->{cve}});
			$txt .= "\n\n";
		}
		if ( $item->{bid} ) {
			$txt .= "BID references: ". join(" ", @{$item->{bid}});
			$txt .= "\n\n";
		}
		if ( $item->{xref} ) {
			$txt .= "Other references: ". join(" ", @{$item->{xref}});
			$txt .= "\n\n";
		}
		$finding->{finding} = $txt;
		print OUT ivil_finding($finding);
	}
}

print OUT "</findings>\n";

#print "Creating sender block\n" if $verbose;
#print OUT ivil_sender($scanner, $scannerversion, $timestamp);


print OUT ivil_close();

close OUT;

exit();

sub help() {
	print "

Usage: nbe2ivil --scanner <scanner> [--scannerversion <versionstring>] \\
                --timestamp <timestamp> [--workspace <workspacename>] \\
		[--scan <scanname>] --infile <filename input> \\
		[--outfile <filename output>] [--verbose] [--help]

Arguments:
--scanner	- The name of the scanner used to create the .nbe file
			Logical options are Nessus, OpenVAS or Nikto
--scannerversion- Optional: the version of the scanner used to create the .nbe
		  file
--timestamp	- Timestamp of when the file was created in the format 
		  YYYYMMDDhhmmss or YYYYMMDDhhmm so 11 december 2011 1:14:00 pm
		  is 20111211131400 or 201112111314
--workspace	- Optional: Which Seccubus workspace do you want to load this 
		  in, this informaiton is used to create the addressee block. 
		  If not value is given for workspace no addressee block is 
		  generated
--scan		- Optional: Which Seccubus scan do you want to load this in, 
		  this informaiton is used to create the addressee block. If 
		  scan is not specified then the value for workspace is used.
--infile	- This defines the .nbe file that will be converted to IVIL
--outfile	- Optional: This defines the name of the file used to output 
		  IVIL. If no filename is given, the infile value is used, 
		  a trailing .nbe is removed (if it exists) and .ivil.xml is 
		  appended
--verbose (-v)	- Be verbose
--help (-h)	- Print this message
";
	exit();
}


